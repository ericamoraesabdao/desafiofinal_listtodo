name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Create .env file
        working-directory: ${{ github.workspace }}
        run: |
          cat <<EOF > .env
          DB_HOST_CONTAINER=postgres
          DB_PORT_CONTAINER=5432
          DB_HOST=localhost
          DB_PORT=5433
          DB_NAME=listtodo
          DB_USERNAME=postgres
          DB_PASSWORD=postgres
          EOF

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Load environment variables
        run: |
          if [ -f .env ]; then
            echo "Loading environment variables from .env"
            export $(grep -v '^#' .env | xargs)
            printenv | grep -E 'DB_HOST|DB_PORT|DB_NAME|DB_USERNAME|DB_PASSWORD' >> $GITHUB_ENV
          fi

      - name: Install Podman and Podman-Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y podman podman-compose

      - name: Set Podman runtime to runc
        run: |
          if [ ! -f /etc/containers/containers.conf ]; then
            echo "Creating default containers.conf"
            sudo mkdir -p /etc/containers
            echo -e "[engine]\nruntime = \"runc\"" | sudo tee /etc/containers/containers.conf > /dev/null
          else
            sudo sed -i 's/^runtime = "crun"/runtime = "runc"/' /etc/containers/containers.conf
          fi
          sudo systemctl restart podman

      - name: Set temporary directory for Podman
        run: |
          export TMPDIR=/tmp
          echo "export TMPDIR=/tmp" >> $GITHUB_ENV

      - name: Start services with Podman-Compose
        run: |
          export COMPOSE_FILE=podman-compose.yaml
          export XDG_RUNTIME_DIR=/run/user/$(id -u)
          sudo podman-compose --env-file .env up -d
        working-directory: .

      - name: Wait for PostgreSQL
        run: |
          for i in {1..30}; do
            sudo podman exec postgres-container psql -U ${DB_USERNAME} -d ${DB_NAME} -c "SELECT 1" && echo "PostgreSQL is ready" && exit 0
            echo "Waiting for PostgreSQL..."
            sleep 5
          done
          echo "PostgreSQL failed to start" && exit 1

      - name: Run tests
        env:
          DB_HOST: ${{ env.DB_HOST }}
          DB_PORT: ${{ env.DB_PORT }}
          DB_NAME: ${{ env.DB_NAME }}
          DB_USERNAME: ${{ env.DB_USERNAME }}
          DB_PASSWORD: ${{ env.DB_PASSWORD }}
          SPRING_PROFILES_ACTIVE: test
        run: mvn test -X

      - name: Stop services
        if: always()
        run: sudo podman-compose down

      - name: Build JAR (fat jar)
        run: mvn clean package -DskipTests

      - name: Archive JAR
        uses: actions/upload-artifact@v4
        with:
          name: lambda-jar
          path: target/listtodo-0.0.1-SNAPSHOT.jar

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: lambda-jar

      - name: List files after download
        run: ls -lR

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Upload JAR to S3
        run: aws s3 cp listtodo-0.0.1-SNAPSHOT.jar s3://list-to-desafio/listtodo-0.0.1-SNAPSHOT.jar

      - name: Update Lambda function code from S3
        run: |
          aws lambda update-function-code \
            --function-name lambda-listtodo \
            --s3-bucket list-to-desafio \
            --s3-key listtodo-0.0.1-SNAPSHOT.jar

      - name: Wait for Lambda update to finish
        run: |
          for i in {1..20}; do
            STATUS=$(aws lambda get-function-configuration --function-name lambda-listtodo --query 'LastUpdateStatus' --output text)
            echo "Current status: $STATUS"
            if [ "$STATUS" = "Successful" ]; then
              echo "Lambda update completed."
              break
            elif [ "$STATUS" = "Failed" ]; then
              echo "Lambda update failed."
              exit 1
            fi
            echo "Waiting for Lambda update to finish..."
            sleep 5
          done

      - name: Update Lambda environment variables
        run: |
          aws lambda update-function-configuration \
            --function-name lambda-listtodo \
            --environment "Variables={DB_HOST=listtodo.cgxc8sqo6gh0.us-east-1.rds.amazonaws.com,DB_PORT=5432,DB_NAME=listtodo,DB_USERNAME=postgres,DB_PASSWORD=postgres}"